from keras.models import Sequential
from keras.layers import LSTM, Dense, Dropout
from keras.preprocessing.sequence import pad_sequences
from keras.callbacks import EarlyStopping
from sklearn.model_selection import train_test_split
import numpy as np


### Need to fit ground truth with exponential curve and then have next five points
### Goal: Have CNN predictions & Delta prediction trajectories, have them trained on ground truth points
### Have 12 of each trajectory -> see the prediction accuracy of last five

cnn_traj=[[[2, 3, 4, 5, 8, 9, 10, 11, 12], [3.3011562824249268, 3.8190481662750244, 6.795086860656738, 7.639291763305664, 16.702896118164062, 25.377206802368164, 31.914037704467773, 37.58642578125, 37.903076171875]], [[2, 3, 4, 5, 8, 9, 10, 11, 12], [5.871921539306641, 6.563495635986328, 8.58310604095459, 11.589681625366211, 40.45226287841797, 41.34474182128906, 39.02125549316406, 19.185850143432617, 21.147737503051758]], [[2, 3, 4, 5, 8, 9, 10, 11, 12], [4.825680255889893, 5.590217590332031, 7.234276294708252, 11.93597412109375, 30.116971969604492, 44.12399673461914, 50.14149475097656, 40.00001907348633, 34.975215911865234]], [[2, 3, 4, 5, 8, 9, 10, 11, 12], [1.125537395477295, 1.7225909233093262, 4.615084648132324, 5.793973922729492, 16.470922470092773, 25.08939552307129, 32.39987564086914, 34.345481872558594, 48.84538269042969]], [[2, 3, 4, 5, 8, 9, 10, 11, 12], [5.051943302154541, 5.993083953857422, 8.280378341674805, 11.93231201171875, 44.50202941894531, 43.89356231689453, 47.40315246582031, 56.21891784667969, 52.43537521362305]], [[2, 3, 4, 5, 8, 9, 10, 11, 12], [6.120640277862549, 6.976648330688477, 10.215485572814941, 15.504484176635742, 53.77358627319336, 53.08540344238281, 49.0422477722168, 47.319122314453125, 52.39181900024414]], [[2, 3, 4, 5, 8, 9, 10, 11, 12], [1.69428288936615, 2.870856285095215, 4.818141937255859, 4.980411052703857, 11.616682052612305, 14.399471282958984, 13.511432647705078, 17.44576072692871, 20.719606399536133]], [[2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19], [1.3181830644607544, 2.6605894565582275, 3.8063812255859375, 5.821236610412598, 9.319671630859375, 10.462279319763184, 10.944440841674805, 14.517412185668945, 17.950197219848633, 19.175073623657227, 44.384124755859375, 43.47215270996094, 52.32146453857422]], [[2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19], [6.246893882751465, 7.026686668395996, 8.747907638549805, 10.304058074951172, 11.301466941833496, 11.9368896484375, 9.339645385742188, 4.3755083084106445, 6.136571884155273, 40.594261169433594, 49.481319427490234, 41.09095001220703, 46.654029846191406]], [[2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19], [7.053853988647461, 8.533811569213867, 10.653952598571777, 12.171913146972656, 14.778789520263672, 17.51129722595215, 15.701995849609375, 13.370838165283203, 13.968021392822266, 56.409244537353516, 59.26716995239258, 52.105010986328125, 43.598846435546875]], [[2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19], [3.0843067169189453, 4.762161731719971, 5.370233058929443, 7.227862358093262, 9.176193237304688, 10.521796226501465, 9.37891960144043, 6.9215803146362305, 7.062241554260254, 10.855718612670898, 10.652034759521484, 16.156435012817383, 17.134294509887695]]]
delta_traj=[[[2, 3, 4, 5, 8, 9, 10, 11, 12], [7.0, 11.448856353759766, 16.1936297416687, 20.920588493347168, 25.60819959640503, 30.54340362548828, 35.146267890930176, 40.021552085876465, 45.62714338302612]], [[2, 3, 4, 5, 8, 9, 10, 11, 12], [5.0, 9.695058822631836, 14.175750255584717, 18.78203582763672, 23.358763694763184, 28.818716526031494, 33.348018646240234, 37.64561700820923, 42.71098613739014]], [[2, 3, 4, 5, 8, 9, 10, 11, 12], [3.0, 7.542001247406006, 12.400106430053711, 16.764895915985107, 21.28067398071289, 25.702121257781982, 30.196800708770752, 34.64323282241821, 39.08886432647705]], [[2, 3, 4, 5, 8, 9, 10, 11, 12], [7.0, 11.639772891998291, 16.056750297546387, 21.800604820251465, 26.15637731552124, 30.58273983001709, 35.157886028289795, 39.654173851013184, 44.25654125213623]], [[2, 3, 4, 5, 8, 9, 10, 11, 12], [10.0, 14.377344131469727, 18.81231689453125, 23.77148199081421, 28.23323392868042, 32.68027639389038, 37.15285015106201, 41.61955118179321, 46.310293674468994]], [[2, 3, 4, 5, 8, 9, 10, 11, 12], [3.0, 7.301433563232422, 11.634309768676758, 15.99364185333252, 20.37793779373169, 24.817033767700195, 29.25375509262085, 33.72183132171631, 38.189712047576904]], [[2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19], [3.0, 7.597553730010986, 12.313210487365723, 16.72624921798706, 21.16797924041748, 25.592437744140625, 30.16238260269165, 34.60638236999512, 39.09922456741333, 43.59916877746582, 48.05374479293823, 52.51051712036133, 56.99340343475342]], [[2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19], [6.0, 10.541696071624756, 15.604465961456299, 20.14920997619629, 24.662841320037842, 29.119744777679443, 33.79085922241211, 38.21607732772827, 42.57802200317383, 46.9906210899353, 51.448928356170654, 55.91153860092163, 60.40375566482544]], [[2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19], [9.0, 13.494057178497314, 18.137024879455566, 22.616709232330322, 27.220823287963867, 31.721155643463135, 36.74188041687012, 41.38234901428223, 46.07630968093872, 51.00292778015137, 56.06806468963623, 61.12289381027222, 65.76356267929077]], [[2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19], [5.0, 9.329321384429932, 13.653166770935059, 18.182908058166504, 22.725586414337158, 27.08512830734253, 31.630447387695312, 36.27671957015991, 41.673606872558594, 46.203040599823, 51.69306135177612, 56.16638898849487, 60.609511375427246]]]
ground_truth=[[[2, 3, 4, 5, 8, 9, 10, 11, 12], [7.0, 9.0, 11.0, 14.0, 26.0, 32.0, 37.0, 44.0, 49.0]], [[2, 3, 4, 5, 8, 9, 10, 11, 12], [5.0, 7.0, 9.0, 13.0, 24.0, 30.0, 37.0, 43.0, 47.0]], [[2, 3, 4, 5, 8, 9, 10, 11, 12], [3.0, 4.0, 6.0, 7.0, 16.0, 20.0, 25.0, 29.0, 34.0]], [[2, 3, 4, 5, 8, 9, 10, 11, 12], [7.0, 9.0, 11.0, 15.0, 30.0, 37.0, 43.0, 52.0, 60.0]], [[2, 3, 4, 5, 8, 9, 10, 11, 12], [10.0, 12.0, 16.0, 19.0, 36.0, 45.0, 48.0, 54.0, 61.0]], [[2, 3, 4, 5, 8, 9, 10, 11, 12], [3.0, 4.0, 5.0, 7.0, 11.0, 11.0, 14.0, 16.0, 20.0]], [[2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19], [3.0, 5.0, 6.0, 7.0, 11.0, 13.0, 14.0, 21.0, 18.0, 40.0, 46.0, 50.0, 55.0]], [[2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19], [6.0, 9.0, 11.0, 11.0, 8.0, 6.0, 9.0, 9.0, 9.0, 23.0, 27.0, 31.0, 36.0]], [[2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19], [9.0, 12.0, 14.0, 15.0, 18.0, 18.0, 19.0, 21.0, 22.0, 40.0, 44.0, 47.0, 52.0]], [[2, 3, 4, 5, 8, 9, 10, 11, 12, 16, 17, 18, 19], [5.0, 6.0, 7.0, 8.0, 11.0, 12.0, 13.0, 13.0, 15.0, 26.0, 26.0, 29.0, 30.0]]]

print(delta_traj[0][1],ground_truth[0][1])
#### LSTM Model Definition
init_len = 4
out_len = 5
model = Sequential()
model.add(LSTM(64, return_sequences=False, input_shape=(init_len, 1)))
model.add(Dense(out_len))  # Output layer to predict 4 points
model.compile(loss='mean_squared_error', optimizer='adam')


#### LSTM Model Training
true_out = []
noisy_in = []
for i in range(len(ground_truth)-1):
    noisy_in.append(delta_traj[i][1][:init_len])
    true_out.append(ground_truth[i][1][init_len:(init_len+out_len)])
true_out = np.array(true_out)
noisy_in = np.array(noisy_in)

# Split data into training + validation and test sets (80% train + validation, 20% test)
X_temp, X_test, y_temp, y_test = train_test_split(noisy_in, true_out, test_size=0.2, random_state=42)

# Further split the training + validation set into training and validation sets (85% train, 15% validation of the temp set)
X_train, X_valid, y_train, y_valid = train_test_split(X_temp, y_temp, test_size=0.15, random_state=42)

X_train = X_train.reshape((-1,init_len,1))
y_train = y_train.reshape((-1,out_len,1))
X_valid = X_valid.reshape((-1,init_len,1))
y_valid = y_valid.reshape((-1,out_len,1))
print(X_train.shape, X_valid.shape, y_train.shape, y_valid.shape)

model.fit(X_train, y_train, epochs=1000, batch_size=2, validation_split=0.2)

#### LSTM Model Evaluation
early_stopping = EarlyStopping(monitor='val_loss', patience=10)
model.fit(X_valid, y_valid, epochs=100, batch_size=2, validation_split=0.2, callbacks=[early_stopping])

test_loss = model.evaluate(X_valid, y_valid)

#### LSTM Model Predictions
predictions = model.predict(X_valid)
print(X_valid, predictions)

model.save('/home/frc-ag-2/Downloads/biomass-prediction-lettuce/old_cnn_results/lstm_20241010-deltawtest-jump3-len'+str(init_len)+'-delta.h5')
